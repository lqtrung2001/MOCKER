package com.mockez.service.impl;

import com.mockez.domain.model.GenerateBody;
import com.mockez.domain.model.entity.Field;
import com.mockez.domain.model.entity.Source;
import com.mockez.repository.GenerateTypeRepository;
import com.mockez.service.GenerateService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Random;

import static com.mockez.constant.GenerateConstant.BACKTICK;
import static com.mockez.constant.GenerateConstant.COMMA_SPACE;
import static com.mockez.constant.GenerateConstant.TEMPLATE_INSERT_BUILDER;

@Service
@AllArgsConstructor
public class GenerateServiceImpl implements GenerateService {

    private GenerateTypeRepository generateTypeRepository;

    @Override
    public String generate(GenerateBody body) {

        StringBuilder result = new StringBuilder("""
                -- NOTE: This file is auto generated by Mockez Generator
                -- Website: https://mockez.com
                -- Version: 0.0.1-SNAPSHOT)
                -- Author: Ho Chi Minh City University of Technology and Education
                """);

        List<Field> fields = body.getFields();

        if (body.getIsIncludeCreateTable()) {
            result.append(TEMPLATE_INSERT_BUILDER);
        }

        String template = String.format(TEMPLATE_INSERT_BUILDER,
                        body.getTableName(),
                        fields.stream().map(field -> BACKTICK + field.getName() + BACKTICK + COMMA_SPACE))
                .replaceFirst(", \\)", ")");

        int index = 0;
        while (++index < body.getRow()) {
            String values = fields.stream()
                    .map(field -> getValueFromAlgorithm(field.getGenerateType().getSources()
                            .stream()
                            .map(Source::getValue)
                            .toList()))
                    .map(value -> BACKTICK + value + BACKTICK + COMMA_SPACE)
                    .toString()
                    .replaceFirst(", \\)", ")");
            result.append(template.replaceAll("/values/", values));
        }
        return result.toString();
    }

    private String getValueFromAlgorithm(List<String> values) {
        return values.get(new Random().nextInt(0, values.size() - 1));
    }
}
