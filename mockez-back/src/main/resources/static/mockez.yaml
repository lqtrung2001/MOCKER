openapi: "3.0.3"
info:
  title: Mockez API
  description: Website MOCKEZ generates source for system testing.
  version: 3.0.0
paths:
  /auth/send-verification-code:
    post:
      operationId: sendVerificationCode
      tags:
        - Auth
      description: send verification code when register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: email
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /auth/verify/{verificationCode}:
    parameters:
      - in: path
        name: verificationCode
        required: true
        description: verification code
        schema:
          type: string
    post:
      operationId: verifyAndSave
      tags:
        - Auth
      description: verify code and save user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /auth/is-existed-username/{username}:
    parameters:
      - in: path
        name: username
        required: true
        description: The username of user
        schema:
          type: string
          format: email
    get:
      operationId: isExistedUsername
      tags:
        - Auth
      description: check is exists username
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /auth/change-password/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The user id
        schema:
          type: string
          format: uuid
    put:
      operationId: changePassword
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      description: change password of a user
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /user/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The id
        schema:
          type: string
          format: uuid
    get:
      operationId: getUser
      tags:
        - User
      description: get user
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteUser
      tags:
        - User
      description: Return id of deleted User
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /user:
    get:
      operationId: getUsers
      description: get users
      tags:
        - User
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: saveUser
      tags:
        - User
      description: save user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: updateUser
      tags:
        - User
      description: update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /user/find-by-username:
    get:
      operationId: getUserByUsername
      parameters:
        - in: query
          name: username
          required: true
          description: The username
          schema:
            type: string
            format: email
      tags:
        - User
      description: get user by username
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /sql-type:
    get:
      operationId: getSQLTypes
      tags:
        - SQLType
      description: Get all SQLType from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SQLType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category:
    get:
      operationId: getCategories
      tags:
        - Category
      description: Get all category from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The Category ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getCategory
      tags:
        - Category
      description: Return a category
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category/{id}/generate-types/count:
    parameters:
      - in: path
        name: id
        required: true
        description: The Category ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateTypesCount
      tags:
        - Category
      description: Return number of generate types in category
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: integer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The GenerateType ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateType
      tags:
        - GenerateType
      description: Return a generatetype
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type/{sqlTypeId}:
    parameters:
      - in: path
        name: sqlTypeId
        required: true
        description: The sqlTypeId
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateTypesBySQLType
      tags:
        - GenerateType
      description: Return a generateType by SQLTypeId
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type:
    get:
      operationId: getGenerateTypes
      tags:
        - GenerateType
      description: Get all GenerateType from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The id of table
        schema:
          type: string
          format: uuid
    post:
      operationId: generate
      tags:
        - Generate
      description: Generate random row in table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate:
    parameters:
      - in: query
        name: row
        required: true
        description: number row need query
        schema:
          type: number
    post:
      operationId: showGenerate
      tags:
        - Generate
      description: Show generate random row in table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /project:
    get:
      operationId: getProjects
      tags:
        - Project
      description: Return list of projects
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: saveOrUpdate
      tags:
        - Project
      description: Save or Update a project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /project/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The project ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getProject
      tags:
        - Project
      description: Return project
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteProject
      tags:
        - Project
      description: Return id of deleted project
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /schema:
    get:
      parameters:
        - in: query
          name: projectId
          required: true
          description: The projectId
          schema:
            type: string
            format: uuid
      operationId: getSchemasByProject
      tags:
        - Schema
      description: Return schemas by projectId
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: saveOrUpdateSchema
      tags:
        - Schema
      description: Save or Update a Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /schema/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The schemaId
        schema:
          type: string
          format: uuid
    get:
      operationId: getSchema
      tags:
        - Schema
      description: Return schema
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteSchema
      tags:
        - Schema
      description: Return id of deleted schema
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /group:
    get:
      operationId: getGroupsWithAccess
      tags:
        - Group
      description: Return groups has access
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: saveOrUpdateGroup
      tags:
        - Group
      description: Save or Update a Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /group/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The groupId
        schema:
          type: string
          format: uuid
    get:
      operationId: getGroup
      tags:
        - Group
      description: Return group
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteGroup
      tags:
        - Group
      description: Return id of deleted group
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /table:
    get:
      parameters:
        - in: query
          name: schemaId
          required: true
          description: The schemaId
          schema:
            type: string
            format: uuid
      operationId: getTablesBySchema
      tags:
        - Table
      description: Return tables by schema
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: saveOrUpdateTable
      tags:
        - Table
      description: Save or Update a Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /table/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The table ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getTable
      tags:
        - Table
      description: Return table
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteTable
      tags:
        - Table
      description: deletes a table
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: string
                format: UUID
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /group-member:
    post:
      operationId: addGroupMember
      tags:
        - GroupMember
      description: Add a GroupMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberPK'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteGroupMember
      tags:
        - GroupMember
      description: delete a group member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberPK'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Base:
      type: object
      description: BASE structure
      properties:
        createdDate:
          type: string
          format: date-time
          description: audit created date
        createdBy:
          readOnly: true
          type: string
          format: uuid
          description: audit created by
        createdByGroup:
          readOnly: true
          type: string
          format: uuid
          description: audit created by group
        modifiedDate:
          type: string
          format: date-time
          description: audit modified date
        modifiedBy:
          readOnly: true
          type: string
          format: uuid
          description: audit modified by
        modifiedByGroup:
          readOnly: true
          type: string
          format: uuid
          description: audit modified by group
        version:
          readOnly: true
          type: integer
          description: audit version
    Category:
      type: object
      description: CATEGORY table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of category
        name:
          type: string
          maxLength: 255
          description: name of category
        description:
          type: string
          maxLength: 1000
          description: description of category
        generateTypes:
          type: array
          description: list generate types of category
          items:
            $ref: '#/components/schemas/GenerateType'
      allOf:
        - $ref: '#/components/schemas/Base'
    Field:
      type: object
      description: FIELD table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of field
        name:
          type: string
          maxLength: 255
          description: name of field
        sqlType:
          $ref: '#/components/schemas/SQLType'
        generateType:
          $ref: '#/components/schemas/GenerateType'
        option:
          $ref: '#/components/schemas/Option'
        table:
          $ref: '#/components/schemas/Table'
      allOf:
        - $ref: '#/components/schemas/Base'
    GenerateType:
      type: object
      description: GENERATE-TYPE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of generate type
        code:
          type: string
          maxLength: 255
          description: code of generate type
        description:
          type: string
          maxLength: 1000
          description: description of generate type
        category:
          $ref: '#/components/schemas/Category'
        sources:
          type: array
          description: list sources of generate type
          items:
            $ref: '#/components/schemas/Source'
        sqlTypes:
          type: array
          description: list sql types of generate type
          items:
            $ref: '#/components/schemas/SQLType'
      allOf:
        - $ref: '#/components/schemas/Base'
    Group:
      type: object
      description: GROUP table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of group
        name:
          type: string
          maxLength: 255
          description: name of group
        description:
          type: string
          maxLength: 1000
          description: description of group
        users:
          type: array
          description: list users of group
          items:
            $ref: '#/components/schemas/User'
        projects:
          type: array
          description: list projects of group
          items:
            $ref: '#/components/schemas/Project'
        groupMembers:
          type: array
          description: list groupMembers of group
          items:
            $ref: '#/components/schemas/GroupMember'
      allOf:
        - $ref: '#/components/schemas/Base'
    GroupMember:
      type: object
      description: GROUP-MEMBER table
      properties:
        id:
          $ref: '#/components/schemas/GroupMemberPK'
        role:
          $ref: '#/components/schemas/Role'
        user:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
      allOf:
        - $ref: '#/components/schemas/Base'
    GroupMemberPK:
      type: object
      description: GROUP-MEMBER primary key table
      properties:
        groupId:
          readOnly: true
          type: string
          format: uuid
          description: group id of group access
        userId:
          readOnly: true
          type: string
          format: uuid
          description: user id of group access
    Option:
      type: object
      description: OPTION table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of option
        blank:
          type: integer
          default: 0
          minimum: 0
          maximum: 100
          description: blank of option
        field:
          $ref: '#/components/schemas/Field'
      allOf:
        - $ref: '#/components/schemas/Base'
    Project:
      type: object
      description: PROJECT table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of project
        name:
          type: string
          maxLength: 255
          description: name of project
        summary:
          type: string
          maxLength: 1000
          description: summary of project
        description:
          type: string
          maxLength: 4096
          description: description of project
        group:
          $ref: '#/components/schemas/Group'
        schemas:
          type: array
          description: list schemas of project
          items:
            $ref: '#/components/schemas/Schema'
      allOf:
        - $ref: '#/components/schemas/Base'
    Schema:
      type: object
      description: SCHEMA table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of schema
        name:
          type: string
          maxLength: 255
          description: name of schema
        description:
          type: string
          maxLength: 1000
          description: description of schema
        project:
          $ref: '#/components/schemas/Project'
        tables:
          type: array
          description: list tables of schema
          items:
            $ref: '#/components/schemas/Table'
      allOf:
        - $ref: '#/components/schemas/Base'
    Source:
      type: object
      description: SOURCE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of source
        value:
          type: string
          maxLength: 4096
          description: value of source
        generateType:
          $ref: '#/components/schemas/GenerateType'
      allOf:
        - $ref: '#/components/schemas/Base'
    SQLType:
      type: object
      description: SQL-TYPE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of sql type
        code:
          type: string
          maxLength: 255
          description: name of sql type
        description:
          type: string
          maxLength: 1000
          description: description of sql type
        generateTypes:
          type: array
          description: list generate types of sql type
          items:
            $ref: '#/components/schemas/GenerateType'
      allOf:
        - $ref: '#/components/schemas/Base'
    Table:
      type: object
      description: TABLE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        name:
          type: string
          maxLength: 255
          description: name of table
        description:
          type: string
          maxLength: 1000
          description: description of table
        schema:
          $ref: '#/components/schemas/Schema'
        fields:
          type: array
          description: list fields of table
          items:
            $ref: '#/components/schemas/Field'
      allOf:
        - $ref: '#/components/schemas/Base'
    User:
      type: object
      description: USER table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of user
        username:
          type: string
          format: email
          maxLength: 255
          description: username of user
        password:
          type: string
          maxLength: 255
          description: password of user
        name:
          type: string
          maxLength: 255
          description: name of user
        bio:
          type: string
          maxLength: 255
          description: name of user
        phone:
          type: string
          maxLength: 12
          description: phone of user
        gender:
          $ref: '#/components/schemas/Gender'
        address:
          type: string
          maxLength: 255
          description: address of user
        dob:
          type: string
          format: date-time
          description: dob of user
        isAccountNonExpired:
          type: boolean
          description: account non-expired
        isAccountNonLocked:
          type: boolean
          description: account non-locked
        isCredentialsNonExpired:
          type: boolean
          description: account credentials non-expired
        isEnabled:
          type: boolean
          description: account enabled
        grantedAuthorities:
          type: string
          description: list of allowed authorities
        groupMembers:
          type: array
          description: list groupMembers of user
          items:
            $ref: '#/components/schemas/GroupMember'
      allOf:
        - $ref: '#/components/schemas/Base'
    ChangePassword:
      type: object
      description: the request of change password api
      properties:
        oldPassword:
          type: string
          description: the old password
        newPassword:
          type: string
          description: the new password
    Gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - OTHER
      description: |
        Gender:
        * MALE - male
        * FEMALE - female
        * OTHER - other
    GenerateRequestBody:
      type: object
      description: body of generate request
      properties:
        row:
          readOnly: true
          type: integer
          default: 0
          minimum: 0
          maximum: 1000
          description: row of source
        fields:
          readOnly: true
          type: array
          description: list fields of generate req
          items:
            $ref: '#/components/schemas/Field'
    Role:
      type: object
      enum:
        - GROUP_ADMIN
        - GROUP_ASSOCIATE
        - USER
        - ADMIN
      description: |
        Mockez role:
        * GROUP_ADMIN - group admin.
        * GROUP_ASSOCIATE - group associate.
        * USER - user.
        * ADMIN - admin.
    Error:
      description: Schema for error response body
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        code:
          enum:
            - UNEXPECTED_EXCEPTION
            - AUTHENTICATION_EXCEPTION
            - PERMISSION_EXCEPTION
            - BAD_REQUEST
            - NOT_FOUND
            - CONFLICT
            - INVALID_STATUS
            - INVALID_PROPERTIES
            - ACTION_NOT_ALLOWED
          description: |
            Ged error code:
            * UNEXPECTED_EXCEPTION - unexpected error.
            * AUTHENTICATION_EXCEPTION - user is not authenticated.
            * PERMISSION_EXCEPTION - user does not have permission to perform the action.
            * BAD_REQUEST - the request is wrong.
            * NOT_FOUND - resource not found.
            * CONFLICT - business error.
            * INVALID_STATUS - resource status is not valid.
            * INVALID_PROPERTIES - the properties is not valid.
            * ACTION_NOT_ALLOWED - the action not allowed.
        additionalMessage:
          type: string
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticationError:
      description: Authentication Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized, access to this resource is not allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request, invalid query syntax
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'