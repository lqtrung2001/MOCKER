openapi: "3.0.3"
info:
  title: Mockez API
  description: Website MOCKEZ generates source for system testing.
  version: 2.2.0
paths:
  /user/login:
    post:
      operationId: login
      tags:
        - user
      description: Login to MOCKEZ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /sql-type:
    get:
      operationId: getSQLTypes
      tags:
        - SQLType
      description: Get all SQLType from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SQLType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category:
    get:
      operationId: getCategories
      tags:
        - Category
      description: Get all category from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The Category ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getCategory
      tags:
        - Category
      description: Return a category
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /category/{id}/generate-types/count:
    parameters:
      - in: path
        name: id
        required: true
        description: The Category ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateTypesCount
      tags:
        - Category
      description: Return number of generate types in category
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: integer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The GenerateType ID
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateType
      tags:
        - GenerateType
      description: Return a generatetype
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type/{sqlTypeId}:
    parameters:
      - in: path
        name: sqlTypeId
        required: true
        description: The sqlTypeId
        schema:
          type: string
          format: uuid
    get:
      operationId: getGenerateTypesBySQLType
      tags:
        - GenerateType
      description: Return a generateType by SQLTypeId
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate-type:
    get:
      operationId: getGenerateTypes
      tags:
        - GenerateType
      description: Get all GenerateType from source
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenerateType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /generate:
    post:
      operationId: generate
      tags:
        - Generate
      description: Generate source
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateReq'
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /project/{groupId}:
    parameters:
      - in: path
        name: groupId
        required: true
        description: The groupId
        schema:
          type: string
          format: uuid
    get:
      operationId: getProjectsByGroup
      tags:
        - Project
      description: Return a project by groupId
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /schema/{projectId}:
    parameters:
      - in: path
        name: projectId
        required: true
        description: The projectId
        schema:
          type: string
          format: uuid
    get:
      operationId: getSchemasByProject
      tags:
        - Schema
      description: Return schemas by projectId
      responses:
        200:
          description: The query is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    Field:
      type: object
      required:
        - id
        - version
      description: FIELD table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          #          pattern: '^[a-z]$ | [_]'
          description: name of field
        sqlType:
          $ref: '#/components/schemas/SQLType'
        generateType:
          $ref: '#/components/schemas/GenerateType'
        option:
          $ref: '#/components/schemas/Option'
    SQLType:
      type: object
      required:
        - id
        - version
      description: SQLTYPE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        code:
          type: string
          maxLength: 225
          description: name of field
        description:
          type: string
          maxLength: 1000
          description: type in SQL
        generateTypes:
          type: array
          items:
            $ref: '#/components/schemas/GenerateType'
    GenerateType:
      type: object
      required:
        - id
        - version
      description: GENERATETYPE table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        code:
          type: string
          maxLength: 225
          description: code for generate
        description:
          type: string
          maxLength: 1000
          description: description for generate type
        category:
          $ref: '#/components/schemas/Category'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
        sqlTypes:
          type: array
          items:
            $ref: '#/components/schemas/SQLType'
    Category:
      type: object
      required:
        - id
        - version
      description: CATEGORY table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          description: name of category
        description:
          type: string
          maxLength: 1000
          description: description for generate type
        generateTypes:
          type: array
          items:
            $ref: '#/components/schemas/GenerateType'
    Source:
      type: object
      required:
        - id
        - version
      description: Source table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        value:
          type: string
          maxLength: 4096
          description: value of source
        generateType:
          $ref: '#/components/schemas/GenerateType'
    Option:
      type: object
      required:
        - id
        - version
      description: OPTION table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of record
        version:
          readOnly: true
          type: integer
          description: version of record
        blank:
          type: integer
          default: 0
          maximum: 100
          description: blank percent
        field:
          $ref: '#/components/schemas/Field'
    Error:
      description: Schema for error response body
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        code:
          enum:
            - UNEXPECTED_EXCEPTION
            - AUTHENTICATION_EXCEPTION
            - PERMISSION_EXCEPTION
            - BAD_REQUEST
            - NOT_FOUND
            - CONFLICT
            - INVALID_STATUS
            - INVALID_PROPERTIES
            - ACTION_NOT_ALLOWED
          description: |
            Ged error code:
            * UNEXPECTED_EXCEPTION - unexpected error.
            * AUTHENTICATION_EXCEPTION - user is not authenticated.
            * PERMISSION_EXCEPTION - user does not have permission to perform the action.
            * BAD_REQUEST - the request is wrong.
            * NOT_FOUND - resource not found.
            * CONFLICT - business error.
            * INVALID_STATUS - resource status is not valid.
            * INVALID_PROPERTIES - the properties is not valid.
            * ACTION_NOT_ALLOWED - the action not allowed.
        additionalMessage:
          type: string
    GenerateReq:
      type: object
      description: The body of generate request
      required:
        - row
        - fields
      properties:
        row:
          readOnly: true
          type: integer
          default: 0
          maximum: 1000
          description: Row number of source
        fields:
          readOnly: true
          type: array
          description: Fields of table
          items:
            $ref: '#/components/schemas/Field'
    User:
      type: object
      required:
        - id
        - version
        - email
        - password
        - name
        - role
        - groupId
      description: USER table
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        version:
          readOnly: true
          type: integer
          description: version of record
        email:
          type: string
          format: email
          maxLength: 225
          description: email of user
        password:
          type: string
          maxLength: 225
          description: password of user
        name:
          type: string
          maxLength: 225
          description: name of user
        gender:
          type: boolean
          description: gender of user
        address:
          type: string
          maxLength: 225
          description: address of user
        dob:
          type: string
          format: date-time
          maxLength: 225
          description: dob of user
        phone:
          type: string
          maxLength: 12
          description: phone of user
        description:
          type: string
          maxLength: 1000
          description: description for generate type
        role:
          type: string
          maxLength: 100
          description: role for generate type
        groupId:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Group:
      type: object
      description: GROUP table
      required:
        - id
        - version
        - name
        - description
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          description: name of group
        description:
          type: string
          maxLength: 1000
          description: description for group
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Project:
      type: object
      description: PROJECT table
      required:
        - id
        - version
        - name
        - description
        - groupId
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          description: name of project
        description:
          type: string
          maxLength: 1000
          description: description for project
        group:
          $ref: '#/components/schemas/Group'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
    Schema:
      type: object
      description: SCHEMA table
      required:
        - id
        - version
        - name
        - description
        - projectId
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          description: name of schema
        description:
          type: string
          maxLength: 1000
          description: description for schema
        project:
          $ref: '#/components/schemas/Project'
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
    Table:
      type: object
      description: TABLE table
      required:
        - id
        - version
        - name
        - description
        - schemaId
      properties:
        id:
          readOnly: true
          type: string
          format: uuid
          description: id of table
        version:
          readOnly: true
          type: integer
          description: version of record
        name:
          type: string
          maxLength: 225
          description: name of table
        description:
          type: string
          maxLength: 1000
          description: description for table
        schema:
          $ref: '#/components/schemas/Schema'
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticationError:
      description: Authentication Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized, access to this resource is not allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request, invalid query syntax
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'