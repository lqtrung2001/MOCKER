/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mocker.api;

import com.mocker.domain.dto.ErrorDto;
import com.mocker.domain.dto.TableDto;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-06T21:19:09.773925100+07:00[Asia/Saigon]")
@Validated
@Api(value = "generate", description = "the generate API")
public interface GenerateApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /generate/table/{id}
     * Generate random row in table
     *
     * @param id The table id (required)
     * @return The query is successful (status code 200)
     *         or Bad request, invalid query syntax (status code 400)
     *         or Authentication Error (status code 401)
     *         or Unauthorized, access to this resource is not allowed (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "generate", notes = "Generate random row in table", response = Map.class, responseContainer = "List", tags={ "Generate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The query is successful", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request, invalid query syntax", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Authentication Error", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "Unauthorized, access to this resource is not allowed", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @PostMapping(
        value = "/generate/table/{id}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<Map<String, String>>> generate(@ApiParam(value = "The table id",required=true) @PathVariable("id") UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"key\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /generate/schema/{id}
     * Generate with schema Id
     *
     * @param id The schema id (required)
     * @return The query is successful (status code 200)
     *         or Bad request, invalid query syntax (status code 400)
     *         or Authentication Error (status code 401)
     *         or Unauthorized, access to this resource is not allowed (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "generateWithSchema", notes = "Generate with schema Id", response = Map.class, responseContainer = "Map", tags={ "Generate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The query is successful", responseContainer = "Map"),
        @ApiResponse(code = 400, message = "Bad request, invalid query syntax", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Authentication Error", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "Unauthorized, access to this resource is not allowed", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @GetMapping(
        value = "/generate/schema/{id}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<Map<String, Map<String, Object>>> generateWithSchema(@ApiParam(value = "The schema id",required=true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /generate
     * Generate random row in table
     *
     * @param tableDto  (required)
     * @return The query is successful (status code 200)
     *         or Bad request, invalid query syntax (status code 400)
     *         or Authentication Error (status code 401)
     *         or Unauthorized, access to this resource is not allowed (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "generateWithTable", notes = "Generate random row in table", response = Map.class, responseContainer = "List", tags={ "Generate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The query is successful", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request, invalid query syntax", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Authentication Error", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "Unauthorized, access to this resource is not allowed", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @PostMapping(
        value = "/generate",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Map<String, String>>> generateWithTable(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TableDto tableDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"key\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
